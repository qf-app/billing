Lab1:
1. create local repo
2.create remote remote (github repo)
3. committhe changes in local repo (add, commit acommnads)
4. push chjnages to remote repo
5. ensure enbale authentication with ssh(private/public keys)/https (username/token)

lab2:
Run below script in ubuntu container:
 Welcome.sh >>  Echo “hello world”
Sh welcome.sh


lab3:

How many ways can merge from one branch to another branch?
Read and explore on these git commands:
Stash
Reset
Revert
Fork
cherry-pick
Pull vs fetch
Merge vs rebase


lab4:
shellscript:   Read about sed, awk and cut commands in shell script
python:  read csv file , write content into csv file 

lab5:
  create webhook and develop httpserver with python
    https://eli.thegreenplace.net/2014/07/09/payload-server-in-python-3-for-github-webhooks
    https://github.com/qf-devops/git-server/blob/master/webhook.rb

  
lab6:
   create maven project and run mvn clean install command.
    ref: 
      mvn archetype:generate -DgroupId=com.qfapp.app -DartifactId=accountservice -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
      mvn clean install
      or 
      docker run -it -v /root/prj/accountservice:/app maven mvn -f /app/pom.xml clean
      
lab7:
  1. mvn clean deploy
  2. create nexus repo using docker in another vm  ref: https://hub.docker.com/r/sonatype/nexus3
      docker run -d -p 8081:8081 --name nexus sonatype/nexus3
  3. create maven repositories in nexus url
  4. add repos in pom.xml using distributed-management:
  
     <distributionManagement>
    <repository>
      <id>spring-releases</id>
      <name>spring-releases</name>
      <url>http://ip-172-31-23-20.ap-south-1.compute.internal:8081/nexus/content/repositories/spring-releases/</url>
    </repository>
    <snapshotRepository>
      <id>spring-snapshots</id>
      <name>spring-snapshots</name>
      <url>http://ip-172-31-23-20.ap-south-1.compute.internal:8081/nexus/content/repositories/spring-snapshots/</url>
    </snapshotRepository>
  </distributionManagement>
  
  5. update credentials in settings.xml :  https://github.com/qf-devops/maven-spring/blob/master/settings.xml
  6. mvn clean deploy -s settings.xml
  
  lab8:
     integrate sonarqube
     docker pull sonarqube
     docker run -itd -p 9000:9000 --name=sonarqube sonarqube
  lab9:
     read about aws policies and roles and user 
  lab10:
    Add slaves to jenkins master  and run docker commands form jenkins job
    use manage nodes and clouds option from manage jenkins section.
    create one vm and install jdk
    creaste dir: /home/ubuntu/jenkins-agent
    copy publickey from master to vm authorized_key
    master side:
      generate ssh key ==> ssh-keygen
      
  lab11:
  build and push docker image into registry  through Jenkinsfile
 commands:
  docker  build -t web:latest .
 docker images
 docker tag web:latest 675467602881.dkr.ecr.ap-south-1.amazonaws.com/webapp:latest
 docker images
 docker push 675467602881.dkr.ecr.ap-south-1.amazonaws.com/webapp   
    
lab12:
 run docker-compose:
 git lcone https://github.com/qfitsolutions/docker.git
 apt  install docker-compose -y
  108  docker-compose -f docker-compose.yml up -d 
  109  docker-compose
  110  docker-compose ps
  111  docker-compose stop
  112  docker-compose start
  113  docker-compose stop
  114  docker-compose ps
  115  docker-compose start
  116  docker-compose ps

lab13:
  refer this url:
    https://bikramat.medium.com/set-up-a-kubernetes-cluster-with-kubeadm-508db74028ce
    
